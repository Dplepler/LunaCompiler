#ifndef TAC_H
#define TAC_H
#include "parser.h"

/* This is a tagged union to determine if args of TAC will point to a struct or to a string */
typedef struct ARG_STRUCT {

  void* value;

  // Type of argument, TAC or string
  enum ARGUMENT_TYPE_ENUM {

    TAC_P,     // A three address code argument, pointing to a different operation
    TEMP_P,    // A three address code argument generated by the compiler as a result of an operation
    CHAR_P,    // An identifier (e.g variable names, function names)

  } type;

} arg_T;

typedef struct TAC_STRUCT {

  int op;
  arg_T* arg1;
  arg_T* arg2;

  struct TAC_STRUCT* next;

} TAC;

typedef struct INSTRUCTIONS_STRUCT {

  TAC* head;
  TAC* last;
  size_t size;

} TAC_list;

TAC_list* init_tac_list();
TAC_list* traversal_visit(AST* node);

arg_T* init_arg(void* arg, int type);

TAC* traversal_func_dec(AST* node, TAC_list* list);
TAC* traversal_var_dec(AST* node, TAC_list* list);
TAC* traversal_binop(AST* node, TAC_list* list);
TAC* traversal_function_call(AST* node, TAC_list* list);
TAC* traversal_assignment(AST* node, TAC_list* list);
TAC* traversal_asm(AST* node, TAC_list* list);
TAC* traversal_return(AST* node, TAC_list* list);

int traversal_check_arg(AST* node);

void traversal_if(AST* node, TAC_list* list);
void traversal_while(AST* node, TAC_list* list);
void* traversal_build_instruction(AST* node, TAC_list* list);
void traversal_statements(AST* node, TAC_list* list);
void list_push(TAC_list* list, TAC* instruction);
void traversal_optimize(TAC_list* list);
void traversal_remove_triple(TAC_list* list, TAC* triple);
void traversal_free_array(TAC_list* list);
void traversal_print_instructions(TAC_list* instructions);

char* dataToAsm(int type);

#endif
 